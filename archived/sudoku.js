/* CODE GENERATED BY SPOCK 0 */
var t256 = function (k158) {
 var t257 = function (k159, t1, t2) {	// take
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t3 = undefined;
  var t258 = function (k160, t4, t5) {	// t3
   var r = SPOCK.count(arguments);
   if(r) return r;
   var t6 = 0;
   var t7 = t5;
   var t260 = (t6) === (t7);
   var t259;
   if(t260 !== false) {
    var t261 = null;
    return k160(t261);
   }
   else {
    var t10 = t4;
    var t11 = t10;
    var t263 = t11.car;
    var t8 = t263;
    var t264 = function (t162) {
     var t265 = function (t161) {
      var t9 = t161;
      var t266 = new SPOCK.Pair(t8, t9);
      return k160(t266);
     };
     var t12 = t4;
     var t13 = t12;
     var t268 = t13.cdr;
     return t3(t265, t268, t162);
    };
    return ___fx_2d(t264, t5, 1);
   }
  };
  t3 = t258;	// set! t3
  return t3(k159, t1, t2);
 };
 ___take = t257;	// set! take
 var t272 = function (k163, t14, t15) {	// drop
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t16 = undefined;
  var t273 = function (k164, t17, t18) {	// t16
   var r = SPOCK.count(arguments);
   if(r) return r;
   var t19 = 0;
   var t20 = t18;
   var t275 = (t19) === (t20);
   var t274;
   if(t275 !== false) {
    return k164(t17);
   }
   else {
    var t277 = function (t165) {
     var t21 = t17;
     var t22 = t21;
     var t278 = t22.cdr;
     return t16(k164, t278, t165);
    };
    return ___fx_2d(t277, t18, 1);
   }
  };
  t16 = t273;	// set! t16
  return t16(k163, t14, t15);
 };
 ___drop = t272;	// set! drop
 var t282 = function (k166, t23, t24, t25, t26) {	// fold
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t26 = SPOCK.rest(arguments, 4);
  var t27 = t26;
  var t284 = (t27) instanceof SPOCK.Pair ;
  var t283;
  if(t284 !== false) {
   var t28 = undefined;
   var t285 = function (k167, t29, t30) {	// t28
    var r = SPOCK.count(arguments);
    if(r) return r;
    var t286 = function (t168) {
     var t287 = function (t169) {
      var t288 = function (t170) {	// t171
       return ___receive(k167, t168, t169, t170);
      };
      var t171 = t288;
      var t31 = ___cars_2bans;
      var t32 = t31;
      var t291 = null;
      var t33 = t291;
      var t292 = (t32) === (t33);
      var t290;
      if(t292 !== false) {
       return t171(t30);
      }
      else {
       var t294 = function (t172) {
        return t28(t171, ___cdrs, t172);
       };
       return ___apply(t294, t23, ___cars_2bans);
      }
     };
     return ____25cars_2bcdrs_2b(t287, t29, t30);
    };
    return ___cars_2bans(t286, ___cdrs);
   };
   t28 = t285;	// set! t28
   var t34 = t25;
   var t35 = t26;
   var t299 = new SPOCK.Pair(t34, t35);
   return t28(k166, t299, t24);
  }
  else {
   var t36 = undefined;
   var t301 = function (k173, t37, t38) {	// t36
    var r = SPOCK.count(arguments);
    if(r) return r;
    var t302 = function (t174) {
     var t303;
     if(t174 !== false) {
      return k173(t38);
     }
     else {
      var t305 = function (t175) {
       var t39 = t37;
       var t40 = t39;
       var t306 = t40.cdr;
       return t36(k173, t306, t175);
      };
      var t41 = t37;
      var t42 = t41;
      var t308 = t42.car;
      return t23(t305, t308, t38);
     }
    };
    return ___null_2dlist_3f(t302, t37);
   };
   t36 = t301;	// set! t36
   return t36(k166, t25, t24);
  }
 };
 ___fold = t282;	// set! fold
 var t312 = function (k176, t43, t44, t45) {	// set-row
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t313 = function (t177) {
   var t314 = function (t180) {
    var t46 = t180;
    var t178 = t46;
    var t315 = function (t179) {
     return ___append(k176, t177, t178, t179);
    };
    var t47 = t44;
    var t48 = 1;
    var t317 = (t47)  +  (t48);
    return ___drop(t315, t43, t317);
   };
   return ____25list(t314, t45);
  };
  return ___take(t313, t43, t44);
 };
 ___set_2drow = t312;	// set! set-row
 var t321 = function (k181, t49, t50) {	// get-row
  var r = SPOCK.count(arguments);
  if(r) return r;
  return ___list_2dref(k181, t49, t50);
 };
 ___get_2drow = t321;	// set! get-row
 var t323 = function (k182, t51, t52, t53, t54) {	// set-position
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t324 = function (t183) {
   var t55 = t183;
   var t325 = function (t184) {
    var t326 = function (t188) {
     var t327 = function (t187) {
      var t56 = t187;
      var t185 = t56;
      var t328 = function (t186) {
       return ___append(k182, t184, t185, t186);
      };
      var t57 = t53;
      var t58 = 1;
      var t330 = (t57)  +  (t58);
      return ___drop(t328, t51, t330);
     };
     return ____25list(t327, t188);
    };
    return ___set_2drow(t326, t55, t52, t54);
   };
   return ___take(t325, t51, t53);
  };
  return ___get_2drow(t324, t51, t53);
 };
 ___set_2dposition = t323;	// set! set-position
 var t336 = function (k189, t59, t60) {	// get-column
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t337 = function (k190, t61, t62) {
   var r = SPOCK.count(arguments);
   if(r) return r;
   var t338 = function (t192) {
    var t339 = function (t191) {
     return ___append(k190, t62, t191);
    };
    return ___take(t339, t192, 1);
   };
   return ___drop(t338, t61, t60);
  };
  var t343 = null;
  return ___fold(k189, t337, t343, t59);
 };
 ___get_2dcolumn = t336;	// set! get-column
 var t345 = function (k193, t63, t64, t65) {	// get-quad
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t346 = function (t198) {
   var t347 = function (t194) {
    var t66 = t194;
    var t348 = function (k195, t69, t70) {
     var r = SPOCK.count(arguments);
     if(r) return r;
     var t349 = function (t197) {
      var t350 = function (t196) {
       return ___append(k195, t70, t196);
      };
      return ___take(t350, t197, 3);
     };
     var t71 = t64;
     var t72 = 3;
     var t353 = (t71)  *  (t72);
     return ___drop(t349, t69, t353);
    };
    var t355 = null;
    return ___fold(k193, t348, t355, t66);
   };
   return ___take(t347, t198, 3);
  };
  var t67 = t65;
  var t68 = 3;
  var t358 = (t67)  *  (t68);
  return ___drop(t346, t63, t358);
 };
 ___get_2dquad = t345;	// set! get-quad
 var t360 = function (k199, t73) {	// could-be
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t361 = function (k200, t74, t75) {
   var r = SPOCK.count(arguments);
   if(r) return r;
   var t362 = function (t201) {
    var t363;
    if(t201 !== false) {
     return k200(t75);
    }
    else {
     var t76 = t74;
     var t77 = t75;
     var t365 = new SPOCK.Pair(t76, t77);
     return k200(t365);
    }
   };
   return ___member(t362, t74, t73);
  };
  var t368 = null;
  var t369 = new SPOCK.Pair(1, new SPOCK.Pair(2, new SPOCK.Pair(3, new SPOCK.Pair(4, new SPOCK.Pair(5, new SPOCK.Pair(6, new SPOCK.Pair(7, new SPOCK.Pair(8, new SPOCK.Pair(9, null)))))))));
  return ___fold(k199, t361, t368, t369);
 };
 ___could_2dbe = t360;	// set! could-be
 var t371 = function (k202, t78, t79, t80) {	// avaliable-at-position
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t372 = function (t204) {
   var t373 = function (t205) {
    var t374 = function (t206) {
     var t375 = function (t203) {
      return ___could_2dbe(k202, t203);
     };
     return ___append(t375, t204, t205, t206);
    };
    var t83 = t79;
    var t84 = 3;
    var t378 = (t83)  /  (t84);
    var t82 = t378;
    var t379 = Math.floor(t82);
    var t81 = t379;
    var t85 = t81;
    var t381 = (t85)  < 0 ;
    var t380;
    if(t381 !== false) {
     var t382 = Math.ceil(t85);
     t380 = t382;
    }
    else {
     var t383 = Math.floor(t85);
     t380 = t383;
    }
    var t88 = t80;
    var t89 = 3;
    var t384 = (t88)  /  (t89);
    var t87 = t384;
    var t385 = Math.floor(t87);
    var t86 = t385;
    var t90 = t86;
    var t387 = (t90)  < 0 ;
    var t386;
    if(t387 !== false) {
     var t388 = Math.ceil(t90);
     t386 = t388;
    }
    else {
     var t389 = Math.floor(t90);
     t386 = t389;
    }
    return ___get_2dquad(t374, t78, t380, t386);
   };
   return ___get_2drow(t373, t78, t80);
  };
  return ___get_2dcolumn(t372, t78, t79);
 };
 ___avaliable_2dat_2dposition = t371;	// set! avaliable-at-position
 var t393 = function (k207, t91) {	// has-1-9?
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t394 = new SPOCK.Pair(1, new SPOCK.Pair(2, new SPOCK.Pair(3, new SPOCK.Pair(4, new SPOCK.Pair(5, new SPOCK.Pair(6, new SPOCK.Pair(7, new SPOCK.Pair(8, new SPOCK.Pair(9, null)))))))));
  var t92 = t394;
  var t93 = t92;
  var t395 = function (t208) {
   var t94 = t208;
   var t396 = SPOCK.equalp(t93, t94);
   return k207(t396);
  };
  var t398 = function (k209, t95, t96) {
   var r = SPOCK.count(arguments);
   if(r) return r;
   var t399 = function (t210) {
    var t400;
    if(t210 !== false) {
     var t401 = function (t212) {
      var t97 = t212;
      var t211 = t97;
      return ___append(k209, t96, t211);
     };
     return ____25list(t401, t95);
    }
    else {
     return k209(t96);
    }
   };
   return ___member(t399, t95, t91);
  };
  var t406 = null;
  return ___fold(t395, t398, t406, t92);
 };
 ___has_2d1_2d9_3f = t393;	// set! has-1-9?
 var t408 = function (k213, t98) {	// rows-solved?
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t409 = function (k214, t99, t100) {
   var r = SPOCK.count(arguments);
   if(r) return r;
   var t410 = function (t215) {
    var t411;
    if(t215 !== false) {
     return k214(t100);
    }
    else {
     return k214(false);
    }
   };
   return ___has_2d1_2d9_3f(t410, t99);
  };
  return ___fold(k213, t409, true, t98);
 };
 ___rows_2dsolved_3f = t408;	// set! rows-solved?
 var t416 = function (k216, t101) {	// cols-solved?
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t417 = function (k217, t102, t103) {
   var r = SPOCK.count(arguments);
   if(r) return r;
   var t418 = function (t219) {
    var t419 = function (t218) {
     var t420;
     if(t218 !== false) {
      return k217(t103);
     }
     else {
      return k217(false);
     }
    };
    return ___has_2d1_2d9_3f(t419, t219);
   };
   return ___get_2dcolumn(t418, t101, t102);
  };
  var t425 = new SPOCK.Pair(0, new SPOCK.Pair(1, new SPOCK.Pair(2, new SPOCK.Pair(3, new SPOCK.Pair(4, new SPOCK.Pair(5, new SPOCK.Pair(6, new SPOCK.Pair(7, new SPOCK.Pair(8, null)))))))));
  return ___fold(k216, t417, true, t425);
 };
 ___cols_2dsolved_3f = t416;	// set! cols-solved?
 var t427 = function (k220, t104) {	// quads-solved?
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t428 = function (k221, t105, t106) {
   var r = SPOCK.count(arguments);
   if(r) return r;
   var t429 = function (t223) {
    var t430 = function (t222) {
     var t431;
     if(t222 !== false) {
      return k221(t106);
     }
     else {
      return k221(false);
     }
    };
    return ___has_2d1_2d9_3f(t430, t223);
   };
   var t107 = t105;
   var t108 = t107;
   var t435 = t108.car;
   var t109 = t105;
   var t111 = t109;
   var t112 = t111;
   var t436 = t112.cdr;
   var t110 = t436;
   var t113 = t110;
   var t437 = t113.car;
   return ___get_2dquad(t429, t104, t435, t437);
  };
  var t439 = new SPOCK.Pair(new SPOCK.Pair(0, new SPOCK.Pair(0, null)), new SPOCK.Pair(new SPOCK.Pair(0, new SPOCK.Pair(1, null)), new SPOCK.Pair(new SPOCK.Pair(0, new SPOCK.Pair(2, null)), new SPOCK.Pair(new SPOCK.Pair(1, new SPOCK.Pair(0, null)), new SPOCK.Pair(new SPOCK.Pair(1, new SPOCK.Pair(1, null)), new SPOCK.Pair(new SPOCK.Pair(1, new SPOCK.Pair(2, null)), new SPOCK.Pair(new SPOCK.Pair(2, new SPOCK.Pair(0, null)), new SPOCK.Pair(new SPOCK.Pair(2, new SPOCK.Pair(1, null)), new SPOCK.Pair(new SPOCK.Pair(2, new SPOCK.Pair(2, null)), null)))))))));
  return ___fold(k220, t428, true, t439);
 };
 ___quads_2dsolved_3f = t427;	// set! quads-solved?
 var t441 = function (k224, t114) {	// is-solved?
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t442 = function (t225) {
   var t443;
   if(t225 !== false) {
    var t444 = function (t226) {
     var t445;
     if(t226 !== false) {
      return ___quads_2dsolved_3f(k224, t114);
     }
     else {
      return k224(false);
     }
    };
    return ___cols_2dsolved_3f(t444, t114);
   }
   else {
    return k224(false);
   }
  };
  return ___rows_2dsolved_3f(t442, t114);
 };
 ___is_2dsolved_3f = t441;	// set! is-solved?
 var t451 = function (k227, t115) {	// has-spaces?
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t452 = function (t229) {
   var t453 = function (t228) {
    var t454;
    if(t228 !== false) {
     return k227(true);
    }
    else {
     return k227(false);
    }
   };
   return ___member(t453, 0, t229);
  };
  var t458 = null;
  return ___fold(t452, ___append, t458, t115);
 };
 ___has_2dspaces_3f = t451;	// set! has-spaces?
 var t460 = function (k230, t116) {	// find-space
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t461 = function (k231, t117, t118) {
   var r = SPOCK.count(arguments);
   if(r) return r;
   var t462 = function (t232) {
    var t119 = t232;
    var t463;
    if(t119 !== false) {
     var t464 = function (t233) {
      var t124 = t233;
      return k231(t124);
     };
     return ____25list(t464, t119, t117);
    }
    else {
     return k231(t118);
    }
   };
   var t468 = function (k234, t120, t121) {
    var r = SPOCK.count(arguments);
    if(r) return r;
    var t469 = function (t237) {
     var t470 = function (t236) {
      var t122 = t236;
      var t123 = 0;
      var t471 = (t122) === (t123);
      var t235 = t471;
      var t472;
      if(t235 !== false) {
       return k234(t120);
      }
      else {
       return k234(t121);
      }
     };
     return ___list_2dref(t470, t237, t120);
    };
    return ___list_2dref(t469, t116, t117);
   };
   var t477 = new SPOCK.Pair(0, new SPOCK.Pair(1, new SPOCK.Pair(2, new SPOCK.Pair(3, new SPOCK.Pair(4, new SPOCK.Pair(5, new SPOCK.Pair(6, new SPOCK.Pair(7, new SPOCK.Pair(8, null)))))))));
   return ___fold(t462, t468, false, t477);
  };
  var t479 = new SPOCK.Pair(0, new SPOCK.Pair(1, new SPOCK.Pair(2, new SPOCK.Pair(3, new SPOCK.Pair(4, new SPOCK.Pair(5, new SPOCK.Pair(6, new SPOCK.Pair(7, new SPOCK.Pair(8, null)))))))));
  return ___fold(k230, t461, false, t479);
 };
 ___find_2dspace = t460;	// set! find-space
 var t481 = function (k238, t125) {	// solve
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t482 = function (t239) {
   var t483;
   if(t239 !== false) {
    return k238(t125);
   }
   else {
    var t485 = function (t247) {
     var t126 = t247;
     var t486;
     if(t126 !== false) {
      t486 = false;
     }
     else {
      t486 = true;
     }
     var t240 = t486;
     var t487;
     if(t240 !== false) {
      return k238(false);
     }
     else {
      var t489 = function (t241) {
       var t490;
       if(t241 !== false) {
        var t491 = function (t242) {
         var t127 = t242;
         var t492 = function (t246) {
          var t493 = function (k243, t128, t129) {
           var r = SPOCK.count(arguments);
           if(r) return r;
           var t494 = function (t244) {
            var t130 = t244;
            var t495 = function (t245) {
             var t138 = t245;
             var t496;
             if(t138 !== false) {
              t496 = t138;
             }
             else {
              t496 = t129;
             }
             return k243(t496);
            };
            return ___solve(t495, t130);
           };
           var t131 = t127;
           var t132 = t131;
           var t499 = t132.car;
           var t133 = t127;
           var t135 = t133;
           var t136 = t135;
           var t500 = t136.cdr;
           var t134 = t500;
           var t137 = t134;
           var t501 = t137.car;
           return ___set_2dposition(t494, t125, t499, t501, t128);
          };
          return ___fold(k238, t493, false, t246);
         };
         var t139 = t127;
         var t140 = t139;
         var t504 = t140.car;
         var t141 = t127;
         var t143 = t141;
         var t144 = t143;
         var t505 = t144.cdr;
         var t142 = t505;
         var t145 = t142;
         var t506 = t145.car;
         return ___avaliable_2dat_2dposition(t492, t125, t504, t506);
        };
        return ___find_2dspace(t491, t125);
       }
       else {
        return k238(false);
       }
      };
      return ___has_2dspaces_3f(t489, t125);
     }
    };
    return ___has_2dspaces_3f(t485, t125);
   }
  };
  return ___is_2dsolved_3f(t482, t125);
 };
 ___solve = t481;	// set! solve
 var t513 = function (k248, t146, t147) {	// range
  var r = SPOCK.count(arguments);
  if(r) return r;
  var t148 = 0;
  var t149 = t146;
  var t515 = (t148)  >  (t149);
  var t514;
  if(t515 !== false) {
   return k248(t147);
  }
  else {
   var t150 = t146;
   var t151 = 1;
   var t517 = (t150)  -  (t151);
   var t152 = t146;
   var t153 = t147;
   var t518 = new SPOCK.Pair(t152, t153);
   return ___range(k248, t517, t518);
  }
 };
 ___range = t513;	// set! range
 var t520 = function (k249) {	// solve-btn-clicked
  loop: while(true) {
   var t521 = console.log("hello");
   return k249(t521);
  }
 };
 ___solve_2dbtn_2dclicked = t520;	// set! solve-btn-clicked
 var t523 = function (k250) {	// solve-btn
  loop: while(true) {
   var t524 = document.getElementById("solve");
   return k250(t524);
  }
 };
 ___solve_2dbtn = t523;	// set! solve-btn
 var t526 = function (t251) {
  var t154 = ___solve_2dbtn_2dclicked;
  var t527 = SPOCK.callback(t154);
  t251.onclick = t527;
  return k158(t527);
 };
 return ___solve_2dbtn(t526);
};
SPOCK.run(t256);
var t530 = function (k252) {
 var t531 = new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(2, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(5, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(1, new SPOCK.Pair(0, new SPOCK.Pair(7, new SPOCK.Pair(0, new SPOCK.Pair(5, new SPOCK.Pair(0, new SPOCK.Pair(2, new SPOCK.Pair(0, new SPOCK.Pair(4, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(9, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(7, new SPOCK.Pair(0, new SPOCK.Pair(4, new SPOCK.Pair(9, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(7, new SPOCK.Pair(3, new SPOCK.Pair(0, new SPOCK.Pair(8, new SPOCK.Pair(0, new SPOCK.Pair(1, new SPOCK.Pair(0, new SPOCK.Pair(3, new SPOCK.Pair(0, new SPOCK.Pair(4, new SPOCK.Pair(0, new SPOCK.Pair(9, new SPOCK.Pair(0, new SPOCK.Pair(3, new SPOCK.Pair(6, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(2, new SPOCK.Pair(1, new SPOCK.Pair(0, new SPOCK.Pair(2, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(8, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(4, new SPOCK.Pair(0, new SPOCK.Pair(8, new SPOCK.Pair(0, new SPOCK.Pair(9, new SPOCK.Pair(0, new SPOCK.Pair(2, new SPOCK.Pair(0, new SPOCK.Pair(6, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(7, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(0, new SPOCK.Pair(8, new SPOCK.Pair(0, new SPOCK.Pair(0, null)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
 var t155 = t531;
 var t532 = function (t255) {
  var t533 = function (k253, t156) {
   var r = SPOCK.count(arguments);
   if(r) return r;
   var t534 = document.getElementById(t156);
   var t157 = t534;
   var t535 = function (t254) {
    t157.value = t254;
    return k253(t254);
   };
   return ___list_2dref(t535, t155, t156);
  };
  return ___for_2deach(k252, t533, t255);
 };
 var t539 = SPOCK.intern("-");
 return ___range(t532, 80, t539);
};
SPOCK.run(t530);
SPOCK.flush();
/* END OF GENERATED CODE */
